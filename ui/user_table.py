# ui/user_table.py

import streamlit as st
import pandas as pd

def safe_format_date(date_val):
    """Formatear fechas de manera segura"""
    try:
        if pd.isna(date_val):
            return "N/A"
        if isinstance(date_val, str):
            parsed_date = pd.to_datetime(date_val, utc=True).tz_localize(None)
            return parsed_date.strftime('%d/%m/%Y %H:%M')
        return date_val.strftime('%d/%m/%Y %H:%M')
    except:
        return str(date_val) if date_val else "N/A"

def render_metrics(df):
    """Renderizar las m√©tricas principales"""
    # M√©tricas principales en 6 columnas m√°s compactas
    col1, col2, col3, col4, col5, col6 = st.columns(6)
    
    with col1:
        st.metric("üë•", len(df), label_visibility="collapsed")
    
    with col2:
        unique_users = df['Login'].nunique()
        st.metric("üë§", unique_users, label_visibility="collapsed")
    
    with col3:
        avg_level = df['Nivel'].mean()
        st.metric("üìä", f"{avg_level:.1f}", label_visibility="collapsed")
    
    with col4:
        users_in_campus = len(df[df['Estado'].str.contains('En campus')])
        st.metric("üü¢", users_in_campus, label_visibility="collapsed")
    
    with col5:
        max_level = df['Nivel'].max()
        st.metric("üèÜ", f"{max_level:.1f}", label_visibility="collapsed")
    
    with col6:
        if 'last_update' in st.session_state:
            last_update = st.session_state.last_update.strftime("%H:%M")
            st.metric("üïí", last_update, label_visibility="collapsed")
        else:
            if 'Wallet' in df.columns and not df['Wallet'].isna().all():
                avg_wallet = df['Wallet'].mean()
                st.metric("üí∞", f"{avg_wallet:.0f}", label_visibility="collapsed")
            else:
                st.metric("üí∞", "N/A", label_visibility="collapsed")
                
    # Leyenda peque√±a debajo
    st.caption("üë• Activos | üë§ √önicos | üìä Nivel ‚åÄ | üü¢ En Campus | üèÜ Max | üïí Update")

def render_user_table(df):
    """Renderizar la tabla de usuarios con filtros"""
    st.markdown("#### üë• Users")
    
    # Filtros en una sola fila m√°s compacta
    col1, col2, col3, col4 = st.columns([2, 1, 1, 1])
    with col1:
        search_user = st.text_input("Search", placeholder="login...", label_visibility="collapsed")
    with col2:
        min_level = st.number_input("Min", min_value=0.0, max_value=50.0, value=0.0, step=1.0, label_visibility="collapsed")
    with col3:
        status_filter = st.selectbox("Status", ["All", "üü¢", "üîµ"], label_visibility="collapsed")
    with col4:
        st.write("")  # Espacio para alineaci√≥n
    
    # Aplicar filtros
    filtered_df = df.copy()
    
    if search_user:
        mask = (filtered_df['Login'].str.contains(search_user, case=False, na=False) |
                filtered_df['Nombre'].str.contains(search_user, case=False, na=False))
        filtered_df = filtered_df[mask]
    
    if min_level > 0:
        filtered_df = filtered_df[filtered_df['Nivel'] >= min_level]
    
    if status_filter != "All":
        if status_filter == "üü¢":
            filtered_df = filtered_df[filtered_df['Estado'].str.contains('En campus')]
        elif status_filter == "üîµ":
            filtered_df = filtered_df[~filtered_df['Estado'].str.contains('En campus')]
    
    # Formatear para mostrar - solo columnas esenciales
    display_columns = ['Login', 'Estado', 'Ubicaci√≥n', 'Nivel']
    
    # Add wallet si existe
    if 'Wallet' in filtered_df.columns:
        display_columns.append('Wallet')
    
    display_df = filtered_df[display_columns].copy()
    
    # Formatear datos de manera m√°s compacta
    display_df['Estado'] = display_df['Estado'].apply(lambda x: "üü¢" if "En campus" in x else "üîµ")
    display_df['Nivel'] = display_df['Nivel'].apply(lambda x: f"{x:.1f}")
    display_df['Ubicaci√≥n'] = display_df['Ubicaci√≥n'].apply(lambda x: x if x != "N/A" else "‚Äî")
    
    # Acortar logins largos
    display_df['Login'] = display_df['Login'].apply(
        lambda x: x[:15] + "..." if len(str(x)) > 15 else str(x)
    )
    
    # Format wallet si existe
    if 'Wallet' in display_df.columns:
        display_df['Wallet'] = display_df['Wallet'].apply(lambda x: f"{x:.0f}")
    
    st.dataframe(
        display_df,
        use_container_width=True,
        height=300,
        hide_index=True
    )
    
    st.caption(f"{len(filtered_df)} of {len(df)} users")

def render_raw_data():
    """Renderizar datos raw si est√°n habilitados"""
    if 'users_raw' in st.session_state:
        st.markdown("## üîç Datos Raw (Primeros 3 registros)")
        st.json(st.session_state.users_raw[:3])

def render_info_section(df, selected_country, selected_campus, days_back, search_method):
    """Renderizar informaci√≥n temporal y de contexto"""
    if not df.empty:
        fecha_min = df['√öltima conexi√≥n'].min().strftime("%d/%m/%Y %H:%M")
        fecha_max = df['√öltima conexi√≥n'].max().strftime("%d/%m/%Y %H:%M")
        country_info = f" | **Pa√≠s:** {selected_country}" if selected_country != "Todos" else ""
        st.info(f"üìÖ **Per√≠odo de actividad:** {fecha_min} ‚Üí {fecha_max} | **Campus:** {selected_campus}{country_info} | **M√©todo:** {search_method}")

def render_help_section():
    """Renderizar secci√≥n de ayuda cuando no hay datos"""
    st.info("üëÜ Selecciona un campus y haz clic en **'Ver usuarios activos'** para cargar los datos")
    
    # Informaci√≥n de ayuda
    with st.expander("‚ÑπÔ∏è Informaci√≥n de Uso"):
        st.markdown("""
        **¬øQu√© muestra este dashboard?**
        - üë• **Usuarios activos:** Estudiantes que han tenido actividad reciente en el campus
        - üìä **An√°lisis temporal:** Cu√°ndo son m√°s activos los usuarios durante el d√≠a
        - üèÜ **Rankings:** Top usuarios por nivel y distribuci√≥n
        - üí∞ **M√©tricas:** Wallet, puntos de evaluaci√≥n y m√°s
        
        **Funcionalidades principales:**
        - ‚úÖ **Filtrado por pa√≠s y campus:** Navega f√°cilmente por toda la red 42
        - ‚úÖ **M√∫ltiples m√©todos de b√∫squeda:** H√≠brido, actividad reciente, ubicaciones activas
        - ‚úÖ **An√°lisis temporal:** Distribuci√≥n de actividad por hora y d√≠a
        - ‚úÖ **Rankings y m√©tricas:** Top usuarios, niveles, wallet y puntos
        - ‚úÖ **Interfaz optimizada:** Filtros intuitivos y visualizaciones claras
        
        **M√©todos de b√∫squeda:**
        - **H√≠brido:** Combina usuarios en campus + actividad reciente (recomendado)
        - **Solo actividad reciente:** Busca usuarios con actividad en el per√≠odo especificado
        - **Solo ubicaciones activas:** Solo usuarios actualmente en el campus
        
        **Configuraci√≥n de credenciales:**
        ```toml
        [api42]
        client_id = "tu_client_id"
        client_secret = "tu_client_secret"
        ```
        
        **Soluci√≥n de problemas:**
        - Si no aparecen usuarios, prueba aumentar el rango de d√≠as
        - Activa el modo debug para ver informaci√≥n detallada del proceso
        - Prueba diferentes m√©todos de b√∫squeda si uno no funciona bien
        """)
